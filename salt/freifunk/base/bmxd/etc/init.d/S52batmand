#!/usr/bin/env bash
### This file managed by Salt, do not edit by hand! ###
#
### BEGIN INIT INFO
# Provides:          S52batmand
# Required-Start:    S41firewall S53backbone-fastd2
# Required-Stop:
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start bmxd
# Description:       bmxd
### END INIT INFO

# docs: https://www.open-mesh.org/projects/batmand/wiki/Doc-overview

export PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'

ARG1="$1"

DAEMON='bmxd'
DAEMON_PATH='/usr/sbin'
DB_PATH='/var/lib/freifunk/bmxd'
RUN_STATUS_FILE='/var/run/batman-status-running'


test ! -d "$DB_PATH" && mkdir -p "$DB_PATH"

#eval $(/usr/bin/netparam)
eval "$(ddmesh-ipcalc.sh -n "$(uci -qX get ffdd.sys.ddmesh_node)")"


#NUMBER_OF_CLIENTS="$(uci -qX get ffdd.sys.backbone_max_tunnel)"

ROUTING_CLASS="$(uci -qX get ffdd.sys.batman_routing_class)"
ROUTING_CLASS="${ROUTING_CLASS:-3}"
ROUTING_CLASS="-r $ROUTING_CLASS --gateway-hysteresis 100"

GATEWAY_CLASS="$(uci -qX get ffdd.sys.batman_gateway_class)"
GATEWAY_CLASS="${GATEWAY_CLASS:-8mbit/8mbit}"
GATEWAY_CLASS="-g $GATEWAY_CLASS"

PREFERED_GATEWAY="$(uci -qX get ffdd.sys.bmxd_prefered_gateway)"
if [ -n "$PREFERED_GATEWAY" ] && [ "$PREFERED_GATEWAY" != '-' ]; then
	PREFERED_GATEWAY="-p $PREFERED_GATEWAY"
	printf '%s\n' "$PREFERED_GATEWAY"
else
	PREFERED_GATEWAY=''
fi

# create a virtual interface for primary interface. loopback has
# 127er IP would be broadcasted
PRIMARY_IF="bmx_prime"
FASTD_IF="tbb_fastd2"
if [ "$1" = "start" ]; then
	#ip link add link lo name "$PRIMARY_IF" type bridge
	ip tuntap add dev "$PRIMARY_IF" mod tun
	ip addr add "$_ddmesh_ip"/"$_ddmesh_netpre" broadcast "$_ddmesh_broadcast" dev "$PRIMARY_IF"
	ip link set dev "$PRIMARY_IF" up
fi

_IF="dev=$PRIMARY_IF /linklayer 0 dev=$FASTD_IF /linklayer 1"

# default start with no gatway.will be updated by gateway_check.sh
SPECIAL_OPTS='--throw-rules 0 --prio-rules 0'
#TUNNEL_OPTS='--one-way-tunnel 1 --two-way-tunnel 2'
TUNNEL_OPTS='--one-way-tunnel 1'
DAEMON_OPTS="$SPECIAL_OPTS $TUNNEL_OPTS $ROUTING_CLASS $PREFERED_GATEWAY $_IF"


test -x "$DAEMON_PATH"/"$DAEMON" || exit 0

case "$ARG1" in
  start)
	printf 'Starting %s: opt: %s\n' "$DAEMON" "$DAEMON_OPTS"
	sleep 3		# wait for start bmxd
#	echo /tmp/coredump > /proc/sys/kernel/core_pattern
#	ulimit -c unlimited
	# check bmxd is running
	proc_bmxd="$(ps x | grep -v grep | grep -c "$DAEMON_PATH"/"$DAEMON")"
	if [ "$proc_bmxd" -eq '0' ]; then
		# return error code to systemd to reflect correct status
		"$DAEMON_PATH"/"$DAEMON" "$DAEMON_OPTS" || exit 1
#		"$DAEMON_PATH"/"$DAEMON" "$DAEMON_OPTS" -d4
	else
		exit 0
	fi
  ;;

  stop)
	printf 'Stopping %s:\n' "$DAEMON"
	killall -9 "$DAEMON"
	ip link set dev "$PRIMARY_IF" down
	ip addr del "$_ddmesh_ip"/"$_ddmesh_netpre" broadcast "$_ddmesh_broadcast" dev "$PRIMARY_IF"
  ;;

  restart|force-reload)
	"$0" stop
	sleep 5
	"$0" start
	/usr/local/bin/freifunk-gateway-check.sh
  ;;

  gateway)
	printf '%s -c %s\n' "$DAEMON" "$GATEWAY_CLASS"
	"$DAEMON_PATH"/"$DAEMON" -c "$GATEWAY_CLASS"
  ;;

  no_gateway)
	printf '%s -c %s\n' "$DAEMON" "$ROUTING_CLASS"
	"$DAEMON_PATH/$DAEMON" -c "$ROUTING_CLASS"
  ;;

  check)
	test -z "$(pidof -s "$DAEMON")" && logger -s "$DAEMON not running - restart" && "$0" restart && exit 0
	test -n "$(pidof -s "$DAEMON")" && test ! -f "$RUN_STATUS_FILE" && (
	touch "$RUN_STATUS_FILE"
		"$DAEMON_PATH"/"$DAEMON" -c --gateways > "$DB_PATH/gateways"
		"$DAEMON_PATH"/"$DAEMON" -c --links > "$DB_PATH/links"
		"$DAEMON_PATH"/"$DAEMON" -c --originators > "$DB_PATH/originators"
		"$DAEMON_PATH"/"$DAEMON" -c --status > "$DB_PATH/status"
		"$DAEMON_PATH"/"$DAEMON" -ci > "$DB_PATH/info"

	rm "$RUN_STATUS_FILE"
	)
  ;;

  addif)
	"$DAEMON_PATH"/"$DAEMON" -c --dev "$2"
	touch "$IF_FILES"/"$2"
  ;;

  delif)
	"$DAEMON_PATH"/"$DAEMON" -c --dev -"$2"
	rm "$IF_FILES"/"$2"
  ;;

  hna)
	exit 1
  ;;

  *)
	printf 'Usage: %s {start|stop|restart|gateway|no_gateway|checkif|addif|delif}\n' "$(basename "$0")"
  ;;

esac

exit 0
