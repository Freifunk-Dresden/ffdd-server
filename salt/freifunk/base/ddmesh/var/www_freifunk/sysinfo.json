#!/usr/bin/env bash

echo 'Content-Type: application/json;charset=UTF-8'
echo ''

BMXD_DB_PATH='/var/lib/freifunk/bmxd'

ddmesh_node="$(uci -qX get ffdd.sys.ddmesh_node)"
test -z "$ddmesh_node" && exit

eval "$(ddmesh-ipcalc.sh -n "$ddmesh_node")"

# store fix value for interface name (used later by awk script to map nettype)
# in firmware this and similar variables are set by ddmesh-utils-network-info.sh
export tbb_fastd_ifname='tbb_fastd2'
wan_ifname="$(uci -qX get ffdd.sys.ifname)"

# Board and Model Information
chassis="$(hostnamectl status | awk '/Chassis/ {print $2}')"
virtualization="$(hostnamectl status | awk '/Virtualization/ {print $2}')"

# check contact community
communities=('Dresden'
	'OL'
	'Pirna'
	'NO'
	'SO'
	'NW'
	'SW'
	'Leipzig')

gu_c="$(uci -qX get ffdd.sys.city)"

if [[ "${communities[*]}" =~ ${gu_c} ]]; then
	contact_city="$gu_c"
elif [ "$gu_c" = 'OL' ] || [ "$gu_c" = 'O.L.' ]; then
	contact_city='Oberlausitz'
else
	contact_city='Dresden'
fi

function combined_statistics() {

	stat_wan_rx=0
	stat_wan_tx=0
	stat_backbone_mesh_rx=0
	stat_backbone_mesh_tx=0
	stat_gateway_rx=0
	stat_gateway_tx=0
	stat_vpn_rx=0
	stat_vpn_tx=0


		for entry in $(/usr/local/bin/freifunk-utils-network-info.sh list)
		do
			net=${entry%%=*}
			net=${net#net_}
			ifname=${entry#*=}
			ifname=${ifname/+/}

			[ -n "$ifname" ] && ifname="$(basename /sys/class/net/${ifname}*)"
			ifpath="/sys/class/net/${ifname}"

			if [ -n "${ifname}" -a -d ${ifpath} ]; then

				rx="$(cat ${ifpath}/statistics/rx_bytes)"
				tx="$(cat ${ifpath}/statistics/tx_bytes)"

				# collect data
				case "$net" in
					wan)
						stat_wan_rx=$((stat_wan_rx + rx))
						stat_wan_tx=$((stat_wan_tx + tx))
					;;

					# use tbbwg main wireguard interface to cover all ipip tunnels
					backbone_wg|backbone_fastd)
						# fix fastd statistic when no connections is established
						test ${net} = "tbb_fastd" -a "$rx" = "0" && tx="0"
						stat_backbone_mesh_rx=$((stat_backbone_mesh_rx + rx))
						stat_backbone_mesh_tx=$((stat_backbone_mesh_tx + tx))
					;;

					ffgw)
						stat_gateway_rx=$((stat_gateway_rx + rx))
						stat_gateway_tx=$((stat_gateway_tx + tx))
					;;

					vpn1|vpn2)
						stat_vpn_rx=$((stat_vpn_rx + rx))
						stat_vpn_tx=$((stat_vpn_tx + tx))
					;;
				esac
			fi
		done

	# output
	cat << EOM
			"wan_rx":"${stat_wan_rx}",
			"wan_tx":"${stat_wan_tx}",
			"backbone_mesh_rx":"${stat_backbone_mesh_rx}",
			"backbone_mesh_tx":"${stat_backbone_mesh_tx}",
			"gateway_rx":"${stat_gateway_rx}",
			"gateway_tx":"${stat_gateway_tx}",
			"vpn_rx":"${stat_vpn_rx}",
			"vpn_tx":"${stat_vpn_tx}"
EOM
}


cat << EOM
{
 "version":"18",
 "timestamp":"$(date +'%s')",
 "data":{

EOM

#node info
cat << EOM
		"firmware":{
			"version":"$(awk '{print $1}' /etc/freifunk-server-version)",
			"git-ddmesh-branch":"$(awk '{print $3}' /etc/freifunk-server-version)",
			"DISTRIB_ID":"$(lsb_release -si)",
			"DISTRIB_RELEASE":"$(lsb_release -sr)",
			"DISTRIB_REVISION":"",
			"DISTRIB_CODENAME":"$(lsb_release -sc)",
			"DISTRIB_TARGET":"$(uname -m)",
			"DISTRIB_DESCRIPTION":"$(lsb_release -sd)"
		},
		"system":{
			"uptime":"$(cat /proc/uptime)",
			"uptime_string":"$(uptime)",
			"uname":"$(uname -a)",
			"nameserver": [ $(sed -n '/nameserver[ 	]\+10\.200/{s#[ 	]*nameserver[ 	]*\(.*\)#\t\t\t\t"\1",#;p}' /etc/resolv.conf | sed '$s#,##') ],
			"date":"$(date)",
			"board":"$(printf '%s\n' "$chassis")",
			"model":"$(printf '%s\n' "$(if [ -n "$virtualization" ]; then echo "$virtualization"; fi)")",
			"model2":"$(printf '%s%s\n' "$chassis" "$(if [ -n "$virtualization" ]; then echo '-'"$virtualization"; fi)")",
			"cpuinfo":"$(awk '/system type|model name/{gsub(/^.*:[ ]*/,"");print $0;exit}' /proc/cpuinfo)",
			"cpucount":"$(grep -c ^processor /proc/cpuinfo)",
			"bmxd" : "$(cat $BMXD_DB_PATH/status)",
			"node_type":"server",
			"autoupdate":$(uci -qX get ffdd.sys.autoupdate)
		},
		"common":{
			"city":"$(printf '%s\n' "$contact_city")",
			"group_id":"$(uci -q get ffdd.sys.group_id)",
			"node":"$_ddmesh_node",
			"domain":"$_ddmesh_domain",
			"ip":"$_ddmesh_ip",
			"network_id":"$(uci -qX get ffdd.sys.network_id)"
		},
		"backbone":{
			"fastd_pubkey":"$(/etc/init.d/S53backbone-fastd2 get_public_key)",
			"wg_pubkey":"$(uci -qX get ffdd.wireguard.public)"
		},
		"gps":{
			"latitude":$(gps_la="$(uci -qX get ffdd.sys.gps_latitude)"; [ "$gps_la" != '' ] && echo "$gps_la" || echo '0'),
			"longitude":$(gps_lo="$(uci -qX get ffdd.sys.gps_longitude)"; [ "$gps_lo" != '' ] && echo "$gps_lo" || echo '0'),
			"altitude":$(gps_al="$(uci -qX get ffdd.sys.gps_altitude)"; [ "$gps_al" != '' ] && echo "$gps_al" || echo '0')
		},
		"contact":{
			"name":"$(uci -qX get ffdd.sys.contact_name)",
			"location":"$(uci -qX get ffdd.sys.contact_location)",
			"email":"$(uci -qX get ffdd.sys.contact_email)",
			"note":"$(uci -qX get ffdd.sys.contact_note)"
		},
EOM

#statistic info
cat<<EOM
		"statistic":{
			"network": {
$(combined_statistics)
			},
$(sed -n '/^MemTotal\|^MemFree\|^Buffers\|^Cached/{s#\(.*\):[ 	]\+\([0-9]\+\)[ 	]*\(.*\)#\t\t\t\"meminfo_\1\" : \"\2\ \3\",#p}' /proc/meminfo)
			"cpu_load" : "$(cat /proc/loadavg)",
			"cpu_stat" : "$(sed -n '/^cpu[ 	]\+/{s# \+# #;p}' /proc/stat)",
			"gateway_usage" : [ ]
		},
EOM

#bmxd
cat<<EOM
		"bmxd":{
			"links":[
EOM
				awk '
					function getnode(ip) {
						split($0,a,".");
						f1=a[3]*255;f2=a[4]-1;
						return f1+f2;
					}
					BEGIN {
						# map iface to net type
						nettype_lookup[ENVIRON["tbb_fastd_ifname"]]="backbone";
					}
					{
						if(match($0,"^[0-9]+[.][0-9]+[.][0-9]+[.][0-9]"))
						{
							printf("\t\t\t\t{\"node\":\"%d\", \"ip\":\"%s\", \"interface\":\"%s\",\"rtq\":\"%d\", \"rq\":\"%d\", \"tq\":\"%d\",\"type\":\"%s\"}, \n",
								getnode($1),$3,$2,$4,$5,$6, nettype_lookup[$2]);
						}
					}
				' "$BMXD_DB_PATH"/links | sed '$s#,[	 ]*$##'
cat<<EOM
			],
			"gateways":{
				"selected":"$(sed -n 's#^[	 ]*=>[	 ]\+\([0-9.]\+\).*$#\1#p' "$BMXD_DB_PATH"/gateways)",
				"preferred":"$(sed -n '1,1s#^.*preferred gateway:[	 ]\+\([0-9.]\+\).*$#\1#p' "$BMXD_DB_PATH"/gateways)",
				"gateways":[
$(sed -n '
					/^[	 ]*$/d
					1,1d
					s#^[	 =>]*\([0-9.]\+\).*$#\t\t\t\t\t{"ip":"\1"},#p
				' "$BMXD_DB_PATH"/gateways | sed '$s#,[	 ]*$##')
				]
			},
			"info":[
$(sed '
					s#^[ 	]*\(.*\)$#\t\t\t\t"\1",#; $s#,[ 	]*$##' "$BMXD_DB_PATH"/info)
			]
		},
		"connections":[
EOM
			netstat -tn 2>/dev/null | grep ESTABLISHED | awk ' {
				split($4,a,":");
				split($5,b,":");
				if(match(a[1],"169.254")) a[1]=ENVIRON["_ddmesh_ip"]
				#allow display node ip
				if(a[1] == ENVIRON["_ddmesh_ip"])
				{
					printf("\t\t\t{\"local\":{\"ip\":\"%s\",\"port\":\"%s\"},\"foreign\":{\"ip\":\"%s\",\"port\":\"%s\"}},\n",a[1],a[2],b[1],b[2]);
				}
			}' | sed '$s#,[ 	]*$##'
cat << EOM
		]
	}
}
EOM
