#!/usr/bin/env bash
### This file managed by Salt, do not edit by hand! ###
#
### BEGIN INIT INFO
# Provides:          S53backbone-fastd2
# Required-Start:    S40network
# Required-Stop:
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start fastd backbone
# Description:       start fastd backbone
### END INIT INFO

# sources: https://projects.universe-factory.net/projects/fastd/wiki
# docs: https://fastd.readthedocs.org/en/v18/

export PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'

DAEMON='/usr/local/bin/fastd'
CONF_DIR='/etc/fastd'
FASTD_CONF="$CONF_DIR"/fastd2.conf
CONF_PEERS='peers2'
PID_FILE='/var/run/fastd2.pid'
backbone_server_port='5002'
COMMAND='/etc/fastd/cmd.sh'

eval "$(ddmesh-ipcalc.sh -n "$(uci -qX get ffdd.sys.ddmesh_node)")"

if [ ! -d "$CONF_DIR"/"$CONF_PEERS" ]; then
	mkdir -p "$CONF_DIR"/"$CONF_PEERS"
fi

generate_keys()
{
	if [ -z "$(uci -q ffdd.fastd.secret)" -o -z "$(uci -q ffdd.fastd.public)" ]; then
		# generate fastd secret & public key
		fastd --generate-key > /tmp/.ffdd_h.txt

		fastd_secret_key="$(sed -n '/^Secret:/{s#^.*: ##;p}' /tmp/.ffdd_h.txt)"
		fastd_public_key="$(sed -n '/^Public:/{s#^.*: ##;p}' /tmp/.ffdd_h.txt)"

		rm -f /tmp/.ffdd_h.txt

		# set fastd-key
		if [ -z "$(uci -qX get ffdd.fastd)" ]; then
			uci add ffdd fastd
			uci rename ffdd.@fastd[-1]='fastd'
		fi
		uci set ffdd.fastd.secret="$fastd_secret_key"
		uci set ffdd.fastd.public="$fastd_public_key"
		uci set ffdd.fastd.restrict="0"
		uci set ffdd.fastd.ext_port="${backbone_server_port}"
		uci commit
	fi
}

generate_fastd_conf()
{
	MTU=1200
	secret="$(uci -qX get ffdd.fastd.secret)"
	if [ -z "$secret" ] || [ "$secret" = '-' ]; then
		logger -t fastd "no secret key - abort"
		exit 1
 	fi

	cat << EOM > "$FASTD_CONF"
#log level warn;
log to syslog level error;
mode tap;
interface "tbb_fastd2";
#prefer "null"
method "null";
method "null+salsa2012+umac";
method "salsa2012+umac";
bind any:$backbone_server_port;
secret "$secret";
mtu $MTU;
include peers from "$CONF_PEERS";
forward no;
on up sync "$COMMAND up";
on down sync "$COMMAND down";
on connect sync "$COMMAND connect";
on establish sync "$COMMAND establish";
on disestablish sync "$COMMAND disestablish";

#only enable verify if I want to ignore peer config files
on verify sync "$COMMAND verify";

EOM
}

add_incomming()
{
	local key="$1"
	local comment="$2"

	if [ -n "$key" ] && [ -n "$comment" ]; then
		#echo "[$key:$comment]"
		FILE="$CONF_DIR/$CONF_PEERS/accept_$key.conf"
		echo "# $comment" > "$FILE"
		echo "key \"$key\";" >> "$FILE"
	else
		printf 'missing args\n'
	fi
}


add_outgoing()
{
	local host="$1"  #hostname or ip
	local port="$2"
	local key="$3"

	[ -z "$port" ] && local port='5002'

	if [ -z "$key" ]; then
		local key="$(wget -q -O - http://"$host"/sysinfo-json.cgi | jq -r '.data.backbone.fastd_pubkey')"

		if [ -z "$key" ] || [ "$key" == 'null' ]; then
			printf 'can not fetch fastd_pubkey from http://%s/sysinfo-json.cgi!\n' "$host"
			printf 'Please use: %s add_connect <host> <port> <fastd_pubkey>\n' "$(basename "$0")"
			exit 0
		fi
	fi

	if [ -n "$host" ] && [ -n "$port" ] && [ -n "$key" ]; then
		echo "[$host:$port:$key]"
		FILE="$CONF_DIR/$CONF_PEERS/connect_${host}_$port.conf"
		echo "key \"$key\";" > "$FILE"
		echo "remote ipv4 \"$host\":$port;" >> "$FILE"
	else
		printf 'missing args\n'
	fi
}

case "$1" in

  start)
	printf 'Starting backbone...\n'

	# generate keys if not present
	generate_keys

	# overwrite values if we have "old" config
	if [ -n "$(uci -q get ffdd.sys.fastd_secret)" -a -n "$(uci -q get ffdd.sys.fastd_public)" ]; then
		uci set ffdd.fastd.restrict="$(uci -qX get ffdd.sys.fastd_restrict)"
		uci delete ffdd.sys.fastd_restrict
		uci set ffdd.fastd.secret="$(uci -qX get ffdd.sys.fastd_secret)"
		uci delete ffdd.sys.fastd_secret
		uci set ffdd.fastd.public="$(uci -qX get ffdd.sys.fastd_public)"
		uci delete ffdd.sys.fastd_public
		uci commit
	fi

	generate_fastd_conf
	# if fastd failes, return error to systemd, else salt always gets an active working status
	# and would not restart fastd.
	proc_fastd="$(ps x | grep -v grep | grep -c $DAEMON)"
	if [ "$proc_fastd" -eq '0' ]; then
		# return error code to systemd to reflect correct status
		"$DAEMON" --config "$FASTD_CONF" --pid-file "$PID_FILE" --daemon || exit 1
	else
		exit 0
	fi
  ;;

  stop)
	printf 'Stopping backbone network...\n'
	if [ -f "$PID_FILE" ]; then
		kill "$(cat $PID_FILE)"
		sleep 1
		rm -f "$PID_FILE"
	fi
  ;;

  restart)
	"$0" stop
	sleep 2
	"$0" start
  ;;

  genkey)
	if [ -x "$DAEMON" ]; then
		$DAEMON --generate-key
		exit 0
	else
		printf "$DAEMON not found\n" 1>&2
		exit 1
	fi
  ;;

  get_public_key)
	uci -qX get ffdd.fastd.public
  ;;

  add_accept)
	key="$2"
	comment="$3"
	add_incomming "$key" "$comment"
  ;;

  add_connect)
	host="$2"
	port="$3"
	key="$4"
	add_outgoing "$host" "$port" "$key"
	#reload config
	test -f "$PID_FILE" && kill -SIGHUP "$(cat $PID_FILE)"
  ;;

   reload)
	test -f "$PID_FILE" && kill -SIGHUP "$(cat $PID_FILE)"
  ;;

   *)
	printf 'usage: %s [start | stop | restart | reload | genkey | get_public_key | add_accept | add_connect\n' "$(basename "$0")"
	printf '  add_accept <pubkey> <comment>\n'
	printf '  add_connect <host> <port>\n'
	printf '  or: add_connect <host> <port> <key>\n'
esac

exit 0
